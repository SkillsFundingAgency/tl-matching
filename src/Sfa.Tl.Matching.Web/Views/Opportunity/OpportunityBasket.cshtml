@using Sfa.Tl.Matching.Models.Enums
@model Sfa.Tl.Matching.Models.ViewModel.OpportunityBasketViewModel

@{
    ViewData["Title"] = "All opportunities";
}

@section backButton{
    <a asp-route="Providers_Get" class="govuk-back-link">Back</a>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary">
                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    There is a problem
                </h2>
            </div>
        }
        <span class="govuk-caption-l"> @Model.CompanyName</span>
        <h1 class="govuk-heading-l">@ViewData["Title"]</h1>
        <button type="submit" class="govuk-button tl-button--grey">
            Add another opportunity
        </button>

        @if (Model.ReferralItems?.Count > 0 || Model.ProvisionGapItems?.Count > 0)
        {
            switch (Model.Type)
            {
                case OpportunityBasketType.ReferralSingleOnly:
                    <partial name="_basketReferralSingle", model="Model.ReferralItems[0]" />
                    break;
                case OpportunityBasketType.ProvisionGapOnly:
                    <form>
                        <partial name="_basketProvisionGap", model="Model.ProvisionGapItems" />
                        <button class="govuk-button">Finish</button>
                    </form>
                    break;
                case OpportunityBasketType.ReferralMultipleOnly:
                    <partial name="_basketReferralMultiple", model="Model.ReferralItems" />
                    break;
                default:
                    <partial name="_basketTabs", model="Model" />
                    break;
            }
        }
    </div>
</div>