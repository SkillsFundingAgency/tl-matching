@using Microsoft.AspNetCore.Mvc.ModelBinding
@model Sfa.Tl.Matching.Models.ViewModel.SearchViewModel

@{
    ViewData["Title"] = "Select providers for this opportunity";
}
@section backButton{
    @*<a asp-controller="Proximity" asp-action="Index" class="govuk-back-link" id="tl-back">Back</a>*@
    <a asp-route="GetBackLink"  
       asp-route-opportunityId="@Model.OpportunityId"
       asp-route-opportunityItemId="@Model.OpportunityItemId"
       class="govuk-back-link" id="tl-back">Back</a>
    @await Component.InvokeAsync("Cancel", new { opportunityId = @Model.OpportunityId, opportunityItemId = @Model.OpportunityItemId })
}

@if (!ViewData.ModelState.IsValid &&
    ViewData.ModelState.GetValidationState("SearchResults.Results[0].IsSelected") == ModelValidationState.Invalid)
{
    <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary">
        <h2 class="govuk-error-summary__title" id="error-summary-title">There is a problem</h2>
        <div class="govuk-error-summary__body">
            <ul class="govuk-list govuk-error-summary__list">
                <li><a href="#SearchResults_Results_0__IsSelected" sfa-validation-for="@Model.SearchResults.Results[0].IsSelected"></a></li>
            </ul>
        </div>
    </div>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <partial name="_searchbox" model="Model.SearchParameters" />
    </div>
</div>

@if (Model.IsValidSearch)
{
    <div class="govuk-grid-row govuk-!-margin-top-5">
        <div class="govuk-grid-column-two-thirds">
            @if (Model.SearchResults?.Results != null && Model.SearchResults.Results.Any())
            {
                <partial name="_searchresults" model="Model" />
            }
            else
            {
                <partial name="_emptysearchresults" model="Model" />
            }
        </div>
    </div>
}